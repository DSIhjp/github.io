{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 欢迎使用高热游戏开发者文档库。 本站提供各类各端开发者技术对接文档说明。 在对接过程中，请诸位开发者认真阅读技术文档。如有对接疑问，可以在相关技术对接群咨询相关对接技术。 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 10:36:02 "},"SDKDownload/":{"url":"SDKDownload/","title":"SDK资源下载中心","keywords":"","body":"欢迎来到高热SDK资源下载中心 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:47:57 "},"SDKDownload/GaoReSdkDownload.html":{"url":"SDKDownload/GaoReSdkDownload.html","title":"高热AndroidSDK资源下载","keywords":"","body":"高热Android SDK 资源下载中心 SDK版本 更新日期 下载地址 版本主要更新内容 2.0.5 2021.11.02 点击下载SDK 第一版 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:40:55 "},"SDKDownload/OverSeaSdkDownload.html":{"url":"SDKDownload/OverSeaSdkDownload.html","title":"海外AndroidSDK资源下载","keywords":"","body":"海外Android SDK 资源下载中心 SDK版本 更新日期 下载地址 版本主要更新内容 3.0.1 2021.11.02 点击下载SDK 第一版 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 15:53:16 "},"GaoReAndroid/":{"url":"GaoReAndroid/","title":"高热AndroidSDK接入文档","keywords":"","body":"高热SDK接入指导文档 SDK版本 日期 更新说明 修改人 2.0.5 2021.11.02 第一版 胡佳鹏 介绍 高热AndroidSDK提供了注册登录、支付、数据上报等功能 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 14:16:44 "},"GaoReAndroid/Import.html":{"url":"GaoReAndroid/Import.html","title":"集成步骤","keywords":"","body":"1 集成步骤 1.1 导入aar包 将物料中的将gaoreSDK_*.aar拷贝至游戏工程中，同时在build.gradle配置上。 implementation(name: 'gaoreSDK_***', ext: 'aar') implementation'com.android.support:support-v4:28.0.0' 1.2 Application配置 1.2.1 自定义Application 游戏内自定义一个类继承Application类，然后在该类的相应方法调用如下代码： GrAPI.getInstance().grOnAppCreate(this); GrAPI.getInstance().grOnAppAttachBaseContext(this, base); GrAPI.getInstance().grOnAppConfigurationChanged(this, newConfig); 1.2.2 示例 public class GRApplication extends Application { private static Application instance; public static Application getApplication() { return instance; } @SuppressLint(\"NewApi\") @Override public void onCreate() { super.onCreate(); GrAPI.getInstance().grOnAppCreate(this); instance = this; } @Override public void attachBaseContext(Context base) { super.attachBaseContext(base); GrAPI.getInstance().grOnAppAttachBaseContext(this, base); } @Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); GrAPI.getInstance().grOnAppConfigurationChanged(this, newConfig); } } 1.2.3 注册Application 在AndroidManifest.xml中注册 注意：application类路径名写绝对路径，不可依赖包名 1.3 混淆声明(非必接) Proguard**配置(混淆非必接，不需要可不进行混淆**) -optimizationpasses 5 -dontusemixedcaseclassnames -dontskipnonpubliclibraryclasses -dontpreverify -verbose -keepattributes Signature -keepattributes *Annotation*,InnerClasses -optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/* -keepattributes *Annotation*,InnerClasses,Signature,EnclosingMethod -renamesourcefileattribute SourceFile -keepattributes SourceFile,LineNumberTable -dontnote android.support.** -dontwarn android.support.** -keep public class * extends android.support.v4.** -keep public class * extends android.support.v7.** -keep public class * extends android.support.annotation.** -keep class **.R$* {*;} -keep public class * extends android.app.Activity -keep public class * extends android.app.Appliction -keep public class * extends android.app.Service -keep public class * extends android.content.BroadcastReceiver -keep public class * extends android.content.ContentProvider -keep public class * extends android.preference.Preference -keep public class com.android.vending.licensing.ILicensingService -keepclassmembers class * extends android.app.Activity{ public void *(android.view.View); } -keepclassmembers class * { void *(**On*Event); void *(**On*Listener); } -keepclasseswithmembernames class * { native ; } -keepclassmembers enum * { public static **[] values(); public static ** valueOf(java.lang.String); } -keep class * implements android.os.Parcelable { public static final android.os.Parcelable$Creator *; } -keepclassmembers class * implements java.io.Serializable { static final long serialVersionUID; private static final java.io.ObjectStreamField[] serialPersistentFields; private void writeObject(java.io.ObjectOutputStream); private void readObject(java.io.ObjectInputStream); java.lang.Object writeReplace(); java.lang.Object readResolve(); } -keep,allowobfuscation @interface android.support.annotation.Keep -keep @android.support.annotation.Keep class * -keepclassmembers class * { @android.support.annotation.Keep *; } -keep class android.support.v4.**{ public *; } -keep class android.support.v7.**{ public *; } -dontwarn dalvik.** -dontwarn com.gaore.** -keep class com.gaore.** { *;} -dontwarn com.gr.sdk.** -keep class com.gr.sdk.** { *;} -dontwarn org.apache.commons.net.** -keep class org.apache.commons.net.** { *;} -keep class org.chromium.** { *; } -keep class aegon.chrome.** { *; } -dontwarn aegon.chrome.** Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 10:39:19 "},"GaoReAndroid/Interface.html":{"url":"GaoReAndroid/Interface.html","title":"接口集成","keywords":"","body":"1 接口集成 1.1 GrAPI类 SDK所有对外接口都定义在该类中，且所有对外接口都为静态方法，可以通过GrAPI.xxx进行调用。 1.2 生命周期方法（必接） GrAPI.getInstance().grOnCreate(savedInstanceState); GrAPI.getInstance().grOnStart(); GrAPI.getInstance().grOnPause(this); GrAPI.getInstance().grOnResume(this); GrAPI.getInstance().grOnNewIntent(intent); GrAPI.getInstance().grOnStop(); GrAPI.getInstance().grOnDestroy(); GrAPI.getInstance().grOnRestart(); GrAPI.getInstance().grOnConfigurationChanged(newConfig); GrAPI.getInstance().grOnSaveInstanceState(outState); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode, data, this); GrAPI.getInstance().grOnRequestPermissionsResult(MainActivity.this, requestCode, permissions, grantResults); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:21:04 "},"GaoReAndroid/Init.html":{"url":"GaoReAndroid/Init.html","title":"初始化接口(必接)","keywords":"","body":"初始化接口（必接） 1 接口定义 /** * 初始化接口 * @param activity 游戏的主activity * @param listener回调类,必传 */ public void grInitSDK(Activity activity, GrSDKCallBack listener); 2 示例 SDK所有的回调都统一在GrSDKCallBack 接口里面 onInitResult(int code)--------------------初始化回调onLoginResult(GRToken authResult)---登录回调，onLogoutResult(int resultCode)---------注销账号回调onExit()------------------------------------退出游戏回调 // 初始化 GrAPI.getInstance().grInitSDK(this, new GrSDKCallBack() { @Override public void onInitResult(int resultCode) { if (resultCode == GrCode.GR_COM_PLATFORM_SUCCESS) { LogUtil.d(\"init success\"); } else { LogUtil.d( \"init fail\"); } } @Override public void onLoginResult(GRToken authResult) { LogUtil.d(\"get token success, tokenInfo : \" + authResult); if (authResult.isSuc()) { LogUtil.d( \"Username:\" + authResult.getUsername()); LogUtil.d( \"channelID:\" + authResult.getChannelID()); LogUtil.d( \"Token:\" + authResult.getToken()); LogUtil.d(\"userid : \" + authResult.getUserID()); } else { LogUtil.d(\"get Token fail\"); } } @Override public void onLogoutResult(int resultCode) { LogUtil.d( \"logout success\"); if (resultCode == GrCode.LOGOUT_ACCOUNT_SUCCESS) { GrAPI.getInstance().grLogin(MainActivity.this); return; } } @Override public void onPayResult(int result) { LogUtil.d( \"onPayResult:\"+result); if (result == GrCode.PAY_GAORE_SUCCESS) { Toast.makeText(MainActivity.this, \"支付成功\", Toast.LENGTH_SHORT).show(); } else if (result == GrCode.PAY_GAORE_FAILED) { Toast.makeText(MainActivity.this, \"支付失敗\", Toast.LENGTH_SHORT).show(); } } @Override public void onExit() { LogUtil.d( \"onExit:\"); MainActivity.this.finish(); } @Override public void onPermissionsResult(int result) { if (result == GrCode.GR_REQUEST_PERMISSIONS_GRANTED) {//授权成功 Toast.makeText(MainActivity.this, \"授权成功\", Toast.LENGTH_SHORT).show(); } } @Override public void onLoginCancel() { Toast.makeText(MainActivity.this, \"取消登入\", Toast.LENGTH_SHORT).show(); } }); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 10:48:45 "},"GaoReAndroid/Login.html":{"url":"GaoReAndroid/Login.html","title":"登录接口(必接)","keywords":"","body":"登录接口（必接） 1 接口定义 /** * 登录接口 * @param activity 游戏的主activity */ public void grLogin(Activity activity); 2 示例 登录回调结果在onLoginResult(GRToken authResult)方法： 通过authResult获取用户登录信息 authResult.getUsername();authResult.getToken();authResult.getUserID(); GrAPI.getInstance().grLogin(MainActivity.this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 10:49:57 "},"GaoReAndroid/Logout.html":{"url":"GaoReAndroid/Logout.html","title":"登出接口(必接)","keywords":"","body":"登出接口（必接） 1 接口定义 /** * 登出接口 * @param activity 游戏的主activity */ public void grLogout() 2 示例 回调结果在onLogoutResult(int resultCode)方法, 研发需要在回调结果中,进行游戏内账号退出，回到游戏登录界面 GrAPI.getInstance().grLogout(); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:50:21 "},"GaoReAndroid/Pay.html":{"url":"GaoReAndroid/Pay.html","title":"支付接口(必接)","keywords":"","body":"支付接口（必接） 1 接口定义 /** * 支付接口 * @param activity 游戏的主activity */ public void grPay(Activity activity, GRPayParams params) 2 示例 高热SDK支付在前端的回调仅代表付款成功，支付成功后sdk服务端会通知研发服务端发放元宝 GrPayParams params = new GrPayParams(); params.setBuyNum(1); // 写默认1 params.setCoinNum(100); // 写默认100 params.setExtension(System.currentTimeMillis() + \"\");//扩展参数 params.setPrice(1); // 单位是元 params.setProductId(\"1\"); params.setProductName(\"元宝\"); params.setProductDesc(\"购买100元宝\"); params.setRoleId(\"1\"); params.setRoleLevel(1); params.setRoleName(\"测试角色名\"); params.setServerId(\"1\"); params.setServerName(\"测试\"); params.setVip(\"vip1\"); GrAPI.getInstance().grPay(MainActivity.this, params); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:55:23 "},"GaoReAndroid/Exit.html":{"url":"GaoReAndroid/Exit.html","title":"退出接口(必接)","keywords":"","body":"退出接口（必接） 1 接口定义 /** *退出接口。 * @param activity 游戏的主activity */ public void grExit(Activity activity) 2 示例 接口回调结果在onExit()方法，需在回调中关闭游戏 研发需要在MainActivity下的onBackPressed()方法和onKeyDown(int keyCode, KeyEvent event)方法下调用该接口，代码如下 @Override public void onBackPressed() { super.onBackPressed(); GrAPI.getInstance().grExit(this); } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if (keyCode == KeyEvent.KEYCODE_BACK) { GrAPI.getInstance().grExit(this); } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:50:21 "},"GaoReAndroid/UploadUserData.html":{"url":"GaoReAndroid/UploadUserData.html","title":"数据上报接口(必接)","keywords":"","body":"数据上报接口（必接） 1 接口定义 /** * 数据上报接口 * @param activity 游戏的主activity * @param extraData 上报信息 */ GrAPI.getInstance().grSubmitExtendData(Activity activity, GRUserExtraData extraData); 2 示例 GrUserExtraData extraData = new GrUserExtraData(); extraData.setDataType(2); // 调用时机，具体见文档 extraData.setServerID(1 + \"\"); // 未获取到服务器时传0 extraData.setServerName(\"服务器名称\"); // 未获取到服务器名称时传null extraData.setRoleName(\"角色名名称\"); // 角色未获取或未创建时传null extraData.setRoleLevel(\"1\"); // 当前角色等级,未获取到角色等级时传null extraData.setRoleID(\"123456789\"); // 当前角色id,未获取角色id时传null extraData.setOrderId(\"7890123456\");// 订单id，未获取时传null extraData.setMoney(0);// 充值金额，单位分，未获取时传0 extraData.setMoneyNum(0 + \"\"); // 玩家身上元宝数量，拿不到或者未获取时传0 extraData.setRoleCreateTime(System.currentTimeMillis() / 1000);// 角色创建时间，未获取或未创建角色时传0 extraData.setGuildId(\"GH10001\");// 公会id，无公会或未获取时传null extraData.setGuildName(\"公会名称\");// 公会名称，无公会或未获取时传null extraData.setGuildLevel(100 + \"\");// 公会等级，无公会或未获取时传0 extraData.setGuildLeader(\"公会会长名\");// 公会会长名称，无公会或未获取时传null extraData.setPower(123123); // 角色战斗力, 不能为空，必须是数字，不能为null,若无,传0 extraData.setProfessionid(123);// 职业ID，不能为空，必须为数字，若无，传入 0 extraData.setProfession(\"职业名称\");// 职业名称，不能为空，不能为 null，若无，传入 “无” extraData.setGender(\"性别\");// 角色性别，不能为空，不能为 null，可传入参数“ 男、女、无” extraData.setProfessionroleid(123);// 职业称号ID，不能为空，不能为 null，若无，传入 0 extraData.setProfessionrolename(\"职业称号\");// 职业称号，不能为空，不能为 null，若无，传入“ 无” extraData.setVip(9);// 玩家VIP等级，不能为空，必须为数字,若无，传入 0 extraData.setGuildroleid(123);// 帮派称号 ID，帮派会长/帮主必传 1，其他可自定义，不能为空，不能为 // null，若无，传入 0 extraData.setGuildrolename(\"帮派称号名称\");// 帮派称号名称，不能为空，不能为 null，若无，传入“无” GrAPI.getInstance().grSubmitExtendData(MainActivity.this, extraData); 3 调用的时机 extraData中的dataType的值: dataType的值 时机 1 选择服务器 2 创建角色 3 进入游戏 4 等级提升 5 退出游戏 6 元宝到账 4 上报参数说明 参数 类型 含义 未获取时传入 dataType int 调用时机 serverID int 服务器**ID 0 serverName String 服务器名称 null roleName String 角色名字 null roleLevel String 角色等级 null roleID String 角色**Id null orderId String 订单**Id null money int 充值金额 0 moneyNum int 角色身上游戏币数量 0 roleCreateTime long 角色创建时间 0 guildId Sting 角色所在公会**id null guildName Sting 角色所在公会名称 null guildLevel int 角色所在公会等级 0 guildLeader Sting 角色所在公会会长 null power long 角色战斗力 0 professionid int 职业**ID 0 profession String 职业名称 “无” gender String 角色性别(“男”,“女”) “无” professionroleid int 职业称号**ID 0 professionrolename String 职业称号 “无” vip int 玩家VIP等级 0 guildroleid int 帮派称号 ID 0 guildrolename String 帮派称号名称 “无” Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:00:21 "},"GaoReAndroid/PersonalCenter.html":{"url":"GaoReAndroid/PersonalCenter.html","title":"用户中心接口(必接)","keywords":"","body":"用户中心接口（必接） 1 接口定义 /** * 个人中心 * * @param activity */ public void grShowAccountDialog(Activity activity) 2 示例 调用此接口展示用户中心窗口 GrAPI.getInstance().grShowAccountDialog(MainActivity.this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:06:10 "},"GaoReAndroid/Customer.html":{"url":"GaoReAndroid/Customer.html","title":"联系客服接口(必接)","keywords":"","body":"联系客服接口（必接） 1 接口定义 /** * 联系客服 * * @param activity */ public void grShowCustomerDialog(Activity activity) 2 示例 调用此接口展示联系客服窗口 GrAPI.getInstance().grShowCustomerDialog(MainActivity.this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:07:44 "},"GaoReAndroid/ActivityLife.html":{"url":"GaoReAndroid/ActivityLife.html","title":"Activity的生命周期(必接)","keywords":"","body":"Activity的生命周期（必接） 1 接口定义 GrAPI.getInstance().grOnCreate(savedInstanceState); GrAPI.getInstance().grOnStart(); GrAPI.getInstance().grOnPause(this); GrAPI.getInstance().grOnResume(this); GrAPI.getInstance().grOnNewIntent(intent); GrAPI.getInstance().grOnStop(); GrAPI.getInstance().grOnDestroy(); GrAPI.getInstance().grOnRestart(); GrAPI.getInstance().grOnConfigurationChanged(newConfig); GrAPI.getInstance().grOnSaveInstanceState(outState); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode, data, this); GrAPI.getInstance().grOnRequestPermissionsResult(MainActivity.this, requestCode, permissions, grantResults); 2 示例 研发需要在Activity的相应生命周期下添加如下方法： @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); GrAPI.getInstance().grOnCreate(savedInstanceState); } @Override protected void onStart() { super.onStart(); GrAPI.getInstance().grOnStart(); } @Override protected void onPause() { super.onPause(); GrAPI.getInstance().grOnPause(); } @Override protected void onResume() { super.onResume(); GrAPI.getInstance().grOnResume(); } @Override protected void onNewIntent(Intent intent) { super.onNewIntent(intent); GrAPI.getInstance().grOnNewIntent(intent); } @Override protected void onStop() { super.onStop(); GrAPI.getInstance().grOnStop(); } @Override protected void onDestroy() { super.onDestroy(); GrAPI.getInstance().grOnDestroy(); } @Override protected void onRestart() { super.onRestart(); GrAPI.getInstance().grOnRestart(); } @Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); GrAPI.getInstance().grOnConfigurationChanged(newConfig); } @Override protected void onSaveInstanceState(Bundle outState) { super.onSaveInstanceState(outState); GrAPI.getInstance().grOnSaveInstanceState(outState); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode,data); } @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { super.onRequestPermissionsResult(requestCode, permissions, grantResults); GrAPI.getInstance().grOnRequestPermissionsResult(MainActivity.this, requestCode, permissions, grantResults); } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:05:18 "},"GaoReAndroid/UpdateGuide.html":{"url":"GaoReAndroid/UpdateGuide.html","title":"更新日志","keywords":"","body":"升级指南 ---------2.0.5更新内容------------ 优化代码 更新 替换aar文件 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:47:03 "},"GaoReAndroid/faq.html":{"url":"GaoReAndroid/faq.html","title":"FAQ","keywords":"","body":"常见问题 1 SDK初始化失败 情况1： 初始化sdk的Activity没有调用 GrAPI.getInstance().grOnActivityResult(requestCode, resultCode, data, this)或者 GrAPI.getInstance().grOnRequestPermissionsResult(MainActivity.this, requestCode, permissions, grantResults); 解决： 查看demo的MainActivity类, 接入生命周期方法 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:22:30 "},"GaoReServer/":{"url":"GaoReServer/","title":"高热服务端接入文档","keywords":"","body":"高热海外服务端接入指导文档 SDK版本 日期 更新说明 修改人 3.0.0 2021.11.01 第一版 胡佳鹏 介绍 服务器登录认证 充值回调接口 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:59:29 "},"GaoReServer/LoginAuth.html":{"url":"GaoReServer/LoginAuth.html","title":"登录认证","keywords":"","body":"登录认证（必接） 1 登录认证地址 注：后面的斜杠”/”不要少 http://apisdk.gaore.com/user/verifyAccount/ 2 请求方式 POST GET 3 参数 参数 描述 userID 登录认证成功之后，返回的userID game_sign 游戏标识，平台提供固定值game_sign token SDK登录认证成功之后，返回到游戏前端的token time 当前时间戳，超时10分钟 sign md5(userID+appid+token+time+loginkey);login_key由平台提供 4 返回 { state: 1(登录认证成功)；其他失败 data: 认证成功才有数据，否则为空 { userID:唯一用户ID username:用户名 } } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:52:51 "},"GaoReServer/PayResult.html":{"url":"GaoReServer/PayResult.html","title":"充值回调","keywords":"","body":"充值回调（必接） 1 接口说明 用户成功充值后，gaore服务端会将用户充值信息通过callbakc_url通知游戏方服务端， 游戏方服务端应在5秒内返回充值结果，否则将判定订单为异常订单。 在订单失败的情况下，返回失败的相应值，此笔订单则由gaore进行定期请求，请游戏方确保该笔订单只成功发放一次游戏币 2 接口定义 接口名称：充值回调接口 接口描述：用户成功充值时，gaore将按照本接口格式通知游戏方为玩家进行充值 接口协议：GET 接口开发：游戏方 接口地址：游戏方提供 3 请求参数 参数 类型 说明 参与签名 必须性 uid int(11) 用户id 是 是 money float 实际充值金额：人民币（元） 是 是 time int(11) 发送请求的时间，UNIX时间戳 是 是 sid int(11) 服务器id 是 是 orderid string(30) 平台订单号，唯一 是 是 ext string(60) 扩展参数，游戏方自定义，原样返回。 是 是 flag string(32) 加密签名，注：.是连接符，不参与加密md5(\"$uid.$money.$time.$sid.$orderid.$ext.$pay_key\") 否 是 4 返回值说明 返回格式：纯数字 返回值 描述 -1 充值失败 1 充值成功 2 不存在此账号 3 Md5错误 4 已经充过值 5 充值金额有误 6 IP限制 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:54:15 "},"OverSeaAndroid/":{"url":"OverSeaAndroid/","title":"海外AndroidSDK接入文档","keywords":"","body":"高热海外SDK接入指导文档 SDK版本 日期 更新说明 修改人 3.0.0 2021.11.01 第一版 胡佳鹏 介绍 海外AndroidSDK提供了注册登录、支付、数据上报等功能 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 10:42:16 "},"OverSeaAndroid/Import.html":{"url":"OverSeaAndroid/Import.html","title":"集成步骤","keywords":"","body":"1 集成步骤 1.1 导入aar包 将物料中的将gaoreSDK_*.aar拷贝至游戏工程中，同时在build.gradle配置上。 implementation(name: 'gaoreSDK_***', ext: 'aar') implementation 'com.google.android.play:core:1.8.0' implementation 'com.facebook.android:facebook-login:11.1.1' implementation 'com.google.android.gms:play-services-auth:19.0.0' implementation \"com.android.billingclient:billing:4.0.0\" implementation 'androidx.recyclerview:recyclerview:1.2.1' implementation platform('com.google.firebase:firebase-bom:28.2.1') implementation 'com.google.firebase:firebase-analytics' 1.2 清单配置 1.2.1 Application配置 1.如果游戏 有自定义的Application ，那么请务必继承类com.gaore.mobile.GrApplication 。并且重写以下三个方法： @Override public void onCreate() { super.onCreate(); } @Override public void onConfigurationChanged(@NonNull Configuration newConfig) { super.onConfigurationChanged(newConfig); } @Override public void attachBaseContext(Context base) { super.attachBaseContext(base); } 2.如果游戏 没有自定义的Application，那么请按照如下要求在Manifest中的application节点配置上： 1.3 build.gradle配置 1.3.1 签名配置 1.签名文件在物料中 signingConfigs { debug { storeFile file('../keystore/gr_default.keystore') storePassword '123456' keyAlias 'grgame' keyPassword '123456' } release { storeFile file('../keystore/gr_default.keystore') storePassword '123456' keyAlias 'grgame' keyPassword '123456' } } 1.3.2 配置参数 1.在如下图所示位置加入： resValue \"string\", \"facebook_app_id\", '高热提供参数' resValue \"string\", \"fb_login_protocol_scheme\", '高热提供参数' resValue \"string\", \"gaore_game_id\", '高热提供参数' resValue \"string\", \"gaore_app_key\",'高热提供参数' 1.3.3 配置firebase 1.将物料中的google-services.json放在根目录，和build.gradle文件同级。如下图所示： 2.在如下图所示位置加入： classpath 'com.google.gms:google-services:4.3.5' 3.在如下图所示位置加入： apply plugin: 'com.google.gms.google-services' Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 15:36:47 "},"OverSeaAndroid/Interface.html":{"url":"OverSeaAndroid/Interface.html","title":"接口集成","keywords":"","body":"1 接口集成 1.1 GrAPI类 SDK所有对外接口都定义在该类中，且所有对外接口都为静态方法，可以通过GrAPI.xxx进行调用。 1.2 生命周期方法（必接） GrAPI.getInstance().grOnCreate(savedInstanceState); GrAPI.getInstance().grOnStart(); GrAPI.getInstance().grOnPause(this); GrAPI.getInstance().grOnResume(this); GrAPI.getInstance().grOnNewIntent(intent); GrAPI.getInstance().grOnStop(); GrAPI.getInstance().grOnDestroy(); GrAPI.getInstance().grOnRestart(); GrAPI.getInstance().grOnConfigurationChanged(newConfig); GrAPI.getInstance().grOnSaveInstanceState(outState); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode, data, this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:21:20 "},"OverSeaAndroid/Init.html":{"url":"OverSeaAndroid/Init.html","title":"初始化接口(必接)","keywords":"","body":"初始化接口（必接） 1 接口定义 /** * 初始化接口 * @param activity 游戏的主activity * @param listener回调类,必传 */ public void grInitSDK(Activity activity, GrSDKCallBack listener); 2 示例 SDK所有的回调都统一在GrSDKCallBack 接口里面 onInitResult(int code)--------------------初始化回调onLoginResult(GRToken authResult)---登录回调，onLogoutResult(int resultCode)---------注销账号回调onExit()------------------------------------退出游戏回调 // 初始化 GrAPI.getInstance().grInitSDK(this, new GrSDKCallBack() { @Override public void onInitResult(int resultCode) { if (resultCode == GrCode.GR_COM_PLATFORM_SUCCESS) { LogUtil.d(\"init success\"); } else { LogUtil.d( \"init fail\"); } } @Override public void onLoginResult(GRToken authResult) { LogUtil.d(\"get token success, tokenInfo : \" + authResult); if (authResult.isSuc()) { LogUtil.d( \"Username:\" + authResult.getUsername()); LogUtil.d( \"channelID:\" + authResult.getChannelID()); LogUtil.d( \"Token:\" + authResult.getToken()); LogUtil.d(\"userid : \" + authResult.getUserID()); } else { LogUtil.d(\"get Token fail\"); } } @Override public void onLogoutResult(int resultCode) { LogUtil.d( \"logout success\"); if (resultCode == GrCode.LOGOUT_ACCOUNT_SUCCESS) { GrAPI.getInstance().grLogin(MainActivity.this); return; } } @Override public void onPayResult(int result) { LogUtil.d( \"onPayResult:\"+result); if (result == GrCode.PAY_GAORE_SUCCESS) { Toast.makeText(MainActivity.this, \"儲值成功\", Toast.LENGTH_SHORT).show(); } else if (result == GrCode.PAY_GAORE_FAILED) { Toast.makeText(MainActivity.this, \"儲值失敗\", Toast.LENGTH_SHORT).show(); }else if (result == GrCode.PAY_GAORE_CANCEL) { Toast.makeText(MainActivity.this, \"儲值取消\", Toast.LENGTH_SHORT).show(); } } @Override public void onExit() { LogUtil.d( \"onExit:\"); MainActivity.this.finish(); } @Override public void onPermissionsResult(int result) { if (result == GrCode.GR_REQUEST_PERMISSIONS_GRANTED) { } } @Override public void onLoginCancel() { Toast.makeText(MainActivity.this, \"取消登入\", Toast.LENGTH_SHORT).show(); } }); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:30:33 "},"OverSeaAndroid/Login.html":{"url":"OverSeaAndroid/Login.html","title":"登录接口(必接)","keywords":"","body":"登录接口（必接） 1 接口定义 /** * 登录接口 * @param activity 游戏的主activity */ public void grLogin(Activity activity); 2 示例 登录回调结果在onLoginResult(GRToken authResult)方法： 通过authResult获取用户登录信息 authResult.getUsername();authResult.getToken();authResult.getUserID(); GrAPI.getInstance().grLogin(MainActivity.this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:57:02 "},"OverSeaAndroid/Logout.html":{"url":"OverSeaAndroid/Logout.html","title":"登出接口(必接)","keywords":"","body":"登出接口（必接） 1 接口定义 /** * 登出接口 * @param activity 游戏的主activity */ public void grLogout() 2 示例 回调结果在onLogoutResult(int resultCode)方法, 研发需要在回调结果中,进行游戏内账号退出，回到游戏登录界面 GrAPI.getInstance().grLogout(); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:50:21 "},"OverSeaAndroid/Pay.html":{"url":"OverSeaAndroid/Pay.html","title":"支付接口(必接)","keywords":"","body":"支付接口（必接） 1 接口定义 /** * 支付接口 * @param activity 游戏的主activity */ public void grPay(Activity activity, GRPayParams params) 2 示例 高热SDK支付在前端的回调仅代表付款成功，支付成功后sdk服务端会通知研发服务端发放元宝 GRPayParams params = new GRPayParams(); params.setBuyNum(1); // 写默认1 params.setCoinNum(100); // 写默认100 params.setExtension(System.currentTimeMillis() + \"\");//透传字段 params.setPrice((float) 4.99); // 单位是美元 params.setProductId(\"com.twmobile.ljsn.499\");//商品ID params.setProductName(\"300魔晶\");//商品名 params.setProductDesc(\"購買300魔晶\");//商品描述 params.setRoleId(\"1\");//角色ID params.setRoleLevel(10);//角色等级 params.setRoleName(\"測試角色名\");//角色名 params.setServerId(\"1\");//区服ID params.setServerName(\"測試\");//区服名 params.setVip(\"vip1\");//vip等级 若无 填'vip0' GrAPI.getInstance().grPay(MainActivity.this, params); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:50:21 "},"OverSeaAndroid/Exit.html":{"url":"OverSeaAndroid/Exit.html","title":"退出接口(必接)","keywords":"","body":"退出接口（必接） 1 接口定义 /** *退出接口。 * @param activity 游戏的主activity */ public void grExit(Activity activity) 2 示例 接口回调结果在onExit()方法，需在回调中关闭游戏 研发需要在MainActivity下的onBackPressed()方法和onKeyDown(int keyCode, KeyEvent event)方法下调用该接口，代码如下 @Override public void onBackPressed() { super.onBackPressed(); GrAPI.getInstance().grExit(this); } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if (keyCode == KeyEvent.KEYCODE_BACK) { GrAPI.getInstance().grExit(this); } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 14:50:21 "},"OverSeaAndroid/UploadUserData.html":{"url":"OverSeaAndroid/UploadUserData.html","title":"数据上报接口(必接)","keywords":"","body":"数据上报接口（必接） 1 接口定义 /** * 数据上报接口 * @param activity 游戏的主activity * @param extraData 上报信息 */ GrAPI.getInstance().grSubmitExtendData(Activity activity, GRUserExtraData extraData); 2 示例 GRUserExtraData extraData = new GRUserExtraData(); extraData.setDataType(7); // 调用时机，具体见下表 extraData.setServerID(1 + \"\"); // 未获取到服务器时传0 extraData.setServerName(\"伺服器名稱\"); // 未获取到服务器名称时传null extraData.setRoleName(\"角色名名稱\"); // 角色未获取或未创建时传null extraData.setRoleLevel(\"1\"); // 当前角色等级,未获取到角色等级时传null extraData.setRoleID(\"123456789\"); // 当前角色id,未获取角色id时传null extraData.setMoneyNum(0 + \"\"); // 玩家身上元宝数量，拿不到或者未获取时传0 extraData.setRoleCreateTime(System.currentTimeMillis() / 1000);// 角色创建时间，未获取或未创建角色时传0 extraData.setGuildId(\"GH10001\");// 公会id，无公会或未获取时传null extraData.setGuildName(\"公會名稱\");// 公会名称，无公会或未获取时传null extraData.setGuildLevel(100 + \"\");// 公会等级，无公会或未获取时传0 extraData.setGuildLeader(\"公會會長名\");// 公会会长名称，无公会或未获取时传null extraData.setPower(123123); // 角色战斗力, 不能为空，必须是数字，不能为null,若无,传0 extraData.setProfessionid(123);// 职业ID，不能为空，必须为数字，若无，传入 0 extraData.setProfession(\"職業名稱\");// 职业名称，不能为空，不能为 null，若无，传入 “无” extraData.setGender(\"性别\");// 角色性别，不能为空，不能为 null，可传入参数“ 男、女、无” extraData.setProfessionroleid(123);// 职业称号ID，不能为空，不能为 null，若无，传入 0 extraData.setProfessionrolename(\"職業稱號\");// 职业称号，不能为空，不能为 null，若无，传入“ 无” extraData.setVip(9);// 玩家VIP等级，不能为空，必须为数字,若无，传入 0 extraData.setSignday(2);// 玩家签到天数，不能为空，必须为数字,若无，传入 0 extraData.setAchievementId(\"富可敵國\");// 玩家解鎖成就，不能为空，不能为 null，若无，传入“ 无” extraData.setGuildroleid(123);// 帮派称号 ID，帮派会长/帮主必传 1，其他可自定义，不能为空，不能为 // null，若无，传入 0 extraData.setGuildrolename(\"幫派稱號名稱\");// 帮派称号名称，不能为空，不能为 null，若无，传入“无” GrAPI.getInstance().grSubmitExtendData(MainActivity.this, extraData); 3 调用的时机 extraData中的dataType的值: dataType的值 时机 1 选择服务器 2 创建角色 3 进入游戏 4 等级提升 5 新手教程开始 6 新手教程结束 7 签到天数 8 获得成就 9 退出游戏 4 上报参数说明 参数 类型 含义 未获取时传入 dataType int 调用时机 serverID int 服务器ID 0 serverName String 服务器名称 null roleName String 角色名字 null roleLevel String 角色等级 null roleId String 角色Id null moneyNum int 角色身上游戏币数量 0 roleCreateTime long 角色创建时间 0 guildId Sting 角色所在公会id null guildName Sting 角色所在公会名称 null guildLevel int 角色所在公会等级 0 guildLeader Sting 角色所在公会会长 null Power long 角色战斗力 0 professionid int 职业ID 0 profession String 职业名称 “无” gender String 角色性别(“男”,“女”) “无” professionroleid int 职业称号ID 0 professionrolename String 职业称号 “无” vip int 玩家VIP等级 0 signday int 玩家签到天数 0 achievementId String 玩家获得成就 “无” guildroleid int 帮派称号 ID 0 guildrolename String 帮派称号名称 “无” Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:08:05 "},"OverSeaAndroid/PersonalCenter.html":{"url":"OverSeaAndroid/PersonalCenter.html","title":"用户中心接口(必接)","keywords":"","body":"用户中心接口（必接） 1 接口定义 /** * 个人中心 * * @param activity */ public void grShowPersonalCenter(Activity activity) 2 示例 调用此接口展示用户中心窗口 GrAPI.getInstance().grShowPersonalCenter(MainActivity.this); Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:08:05 "},"OverSeaAndroid/ActivityLife.html":{"url":"OverSeaAndroid/ActivityLife.html","title":"Activity的生命周期(必接)","keywords":"","body":"Activity的生命周期（必接） 1 接口定义 GrAPI.getInstance().grOnCreate(savedInstanceState); GrAPI.getInstance().grOnStart(); GrAPI.getInstance().grOnPause(this); GrAPI.getInstance().grOnResume(this); GrAPI.getInstance().grOnNewIntent(intent); GrAPI.getInstance().grOnStop(); GrAPI.getInstance().grOnDestroy(); GrAPI.getInstance().grOnRestart(); GrAPI.getInstance().grOnConfigurationChanged(newConfig); GrAPI.getInstance().grOnSaveInstanceState(outState); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode, data, this); 2 示例 研发需要在Activity的相应生命周期下添加如下方法： @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); GrAPI.getInstance().grOnCreate(savedInstanceState); } @Override protected void onStart() { super.onStart(); GrAPI.getInstance().grOnStart(); } @Override protected void onPause() { super.onPause(); GrAPI.getInstance().grOnPause(); } @Override protected void onResume() { super.onResume(); GrAPI.getInstance().grOnResume(); } @Override protected void onNewIntent(Intent intent) { super.onNewIntent(intent); GrAPI.getInstance().grOnNewIntent(intent); } @Override protected void onStop() { super.onStop(); GrAPI.getInstance().grOnStop(); } @Override protected void onDestroy() { super.onDestroy(); GrAPI.getInstance().grOnDestroy(); } @Override protected void onRestart() { super.onRestart(); GrAPI.getInstance().grOnRestart(); } @Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); GrAPI.getInstance().grOnConfigurationChanged(newConfig); } @Override protected void onSaveInstanceState(Bundle outState) { super.onSaveInstanceState(outState); GrAPI.getInstance().grOnSaveInstanceState(outState); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); GrAPI.getInstance().grOnActivityResult(requestCode, resultCode,data); } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:08:05 "},"OverSeaAndroid/UpdateGuide.html":{"url":"OverSeaAndroid/UpdateGuide.html","title":"更新日志","keywords":"","body":"升级指南 ---------3.0.0更新内容------------ 优化代码 更新 替换aar文件 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-02 11:46:34 "},"OverSeaServer/":{"url":"OverSeaServer/","title":"海外服务端接入文档","keywords":"","body":"高热海外服务端接入指导文档 SDK版本 日期 更新说明 修改人 3.0.0 2021.11.01 第一版 胡佳鹏 介绍 服务器登录认证 充值回调接口 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:59:29 "},"OverSeaServer/LoginAuth.html":{"url":"OverSeaServer/LoginAuth.html","title":"登录认证","keywords":"","body":"登录认证（必接） 1 登录认证地址 注：后面的斜杠”/”不要少 http://apisdk.gaore.com.hk/user/verifyAccount/ 2 请求方式 POST GET 3 参数 参数 描述 userID 登录认证成功之后，返回的userID appid 平台分配的appid token SDK登录认证成功之后，返回到游戏前端的token time 当前时间戳，超时10分钟 sign md5(userID+appid+token+time+loginkey);login_key由平台提供 4 返回 { state: 1(登录认证成功)；其他失败 data: 认证成功才有数据，否则为空 { userID:唯一用户ID username:用户名 } } Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:47:50 "},"OverSeaServer/PayResult.html":{"url":"OverSeaServer/PayResult.html","title":"充值回调","keywords":"","body":"充值回调（必接） 1 接口说明 用户成功充值后，gaore服务端会将用户充值信息通过callbakc_url通知游戏方服务端， 游戏方服务端应在5秒内返回充值结果，否则将判定订单为异常订单。 在订单失败的情况下，返回失败的相应值，此笔订单则由gaore进行定期请求，请游戏方确保该笔订单只成功发放一次游戏币 2 接口定义 接口名称：充值回调接口 接口描述：用户成功充值时，gaore将按照本接口格式通知游戏方为玩家进行充值 接口协议：GET 接口开发：游戏方 接口地址：游戏方提供 3 请求参数 参数 类型 说明 参与签名 必须性 uid int(11) 用户id 是 是 money float 实际充值金额：美元 是 是 time int(11) 发送请求的时间，UNIX时间戳 是 是 sid int(11) 服务器id 是 是 orderid string(30) 平台订单号，唯一 是 是 ext string(60) 扩展参数，游戏方自定义，原样返回。 是 是 flag string(32) 加密签名，注：.是连接符，不参与加密md5(\"$uid.$money.$time.$sid.$orderid.$ext.$pay_key\") 否 是 4 返回值说明 返回格式：纯数字 返回值 描述 -1 充值失败 1 充值成功 2 不存在此账号 3 Md5错误 4 已经充过值 5 充值金额有误 6 IP限制 Copyright(©)u2017浙江争游网络科技有限公司版权所有 all right reserved，powered by GitbookFile Modify: 2021-11-01 15:54:44 "}}